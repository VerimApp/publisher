# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import auth_pb2 as auth__pb2
import publisher_pb2 as publisher__pb2


class PublisherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.publications_create = channel.unary_unary(
                '/publisher.Publisher/publications_create',
                request_serializer=publisher__pb2.CreatePublicationRequest.SerializeToString,
                response_deserializer=publisher__pb2.PublicationResponse.FromString,
                )
        self.publications_selection = channel.unary_unary(
                '/publisher.Publisher/publications_selection',
                request_serializer=publisher__pb2.PaginationRequest.SerializeToString,
                response_deserializer=publisher__pb2.PublicationsSelectionResponse.FromString,
                )
        self.publications_vote = channel.unary_unary(
                '/publisher.Publisher/publications_vote',
                request_serializer=publisher__pb2.VoteRequest.SerializeToString,
                response_deserializer=auth__pb2.Empty.FromString,
                )


class PublisherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def publications_create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publications_selection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publications_vote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PublisherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'publications_create': grpc.unary_unary_rpc_method_handler(
                    servicer.publications_create,
                    request_deserializer=publisher__pb2.CreatePublicationRequest.FromString,
                    response_serializer=publisher__pb2.PublicationResponse.SerializeToString,
            ),
            'publications_selection': grpc.unary_unary_rpc_method_handler(
                    servicer.publications_selection,
                    request_deserializer=publisher__pb2.PaginationRequest.FromString,
                    response_serializer=publisher__pb2.PublicationsSelectionResponse.SerializeToString,
            ),
            'publications_vote': grpc.unary_unary_rpc_method_handler(
                    servicer.publications_vote,
                    request_deserializer=publisher__pb2.VoteRequest.FromString,
                    response_serializer=auth__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'publisher.Publisher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Publisher(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def publications_create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/publisher.Publisher/publications_create',
            publisher__pb2.CreatePublicationRequest.SerializeToString,
            publisher__pb2.PublicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publications_selection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/publisher.Publisher/publications_selection',
            publisher__pb2.PaginationRequest.SerializeToString,
            publisher__pb2.PublicationsSelectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publications_vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/publisher.Publisher/publications_vote',
            publisher__pb2.VoteRequest.SerializeToString,
            auth__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
